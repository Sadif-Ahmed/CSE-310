At line no: 1: type_specifier : INT 

int

At line no: 1: type_specifier : INT 

int

At line no: 1 parameter_list  : type_specifier ID

int a

New ScopeTable with id 1.1 created

At line no: 2: type_specifier : INT 

int

At line no: 2 declaration_list : ID

k

At line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

int k;

At line no: 2 statement : var_declaration

int k;

At line no: 2 statements : statement

int k;


Line 3: variable : ID
k

Line 3: factor : CONST_INT

5

Line 3: unary_expression :	factor

5

Line 3: term :	unary_expression

5

Line 3: simple_expression : term

5

Line 3: rel_expression	: simple_expression

5

Line 3: logic_expression : rel_expression

5

Line 3: expression : variable ASSIGNOP logic_expression

k = 5

Line 3: expression_statement : expression SEMICOLON

k1;

At line no: 3 statement : expression_statement

k1

At line no: 3 statements : statements statement

int k;
 k1


Line 4: variable : ID
k

Line 4: factor : variable

k

Line 4: unary_expression :	factor

k

Line 4: term :	unary_expression

k

Line 4: simple_expression : term

k

Line 4: factor : CONST_INT

0

Line 4: unary_expression :	factor

0

Line 4: term :	unary_expression

0

Line 4: simple_expression : term

0

Line 4: rel_expression : simple_expression RELOP simple_expression

k>0

Line 4: logic_expression : rel_expression

T1

Line 4: expression : logic_expression

T1

Line 5: variable : ID
a

Line 5: unary_expression :	factor

a1

Line 5: term :	unary_expression

a1

Line 5: simple_expression : term

a1

Line 5: rel_expression	: simple_expression

a1

Line 5: logic_expression : rel_expression

a1

Line 5: expression : logic_expression

a1

Line 5: expression_statement : expression SEMICOLON

a1;

At line no: 5 statement : expression_statement

a1

At line no: 5 statements : statement

a1


Line 6: variable : ID
k

Line 6: unary_expression :	factor

T2

Line 6: term :	unary_expression

T2

Line 6: simple_expression : term

T2

Line 6: rel_expression	: simple_expression

T2

Line 6: logic_expression : rel_expression

T2

Line 6: expression : logic_expression

T2

Line 6: expression_statement : expression SEMICOLON

T2;

At line no: 6 statement : expression_statement

T2

At line no: 6 statements : statements statement

a1
 T2


At line no: 7 compound_statement : LCURL statements RCURL

{
a1
T2

}

At line no: 7 statement : compound_statement

a1
T2


At line no: 7 statement : WHILE LPAREN expression RPAREN statement

while(T1)a1
T2


At line no: 7 statements : statements statement

int k;
k1
 while

Line 8: factor : CONST_INT

3

Line 8: unary_expression :	factor

3

Line 8: term :	unary_expression

3

Line 8: variable : ID
a

Line 8: factor : variable

a

Line 8: unary_expression :	factor

a

Line 8: term : term MULOP unary_expression

3*a

Line 8: simple_expression : term

T3

Line 8: factor : CONST_INT

7

Line 8: unary_expression :	factor

7

Line 8: term :	unary_expression

7

Line 8: simple_expression : simple_expression ADDOP term

T3-7

Line 8: rel_expression	: simple_expression

T4

Line 8: logic_expression : rel_expression

T4

Line 8: expression : logic_expression

T4

Line 8: statement : RETURN expression SEMICOLON

return T4;

At line no: 8 statements : statements statement

int k;
k1
while return

Line 9: variable : ID
a

Line 9: factor : CONST_INT

9

Line 9: unary_expression :	factor

9

Line 9: term :	unary_expression

9

Line 9: simple_expression : term

9

Line 9: rel_expression	: simple_expression

9

Line 9: logic_expression : rel_expression

9

Line 9: expression : variable ASSIGNOP logic_expression

a = 9

Line 9: expression_statement : expression SEMICOLON

a1;

At line no: 9 statement : expression_statement

a1

At line no: 9 statements : statements statement

int k;
k1
whilereturn a1


At line no: 10 compound_statement : LCURL statements RCURL

{
int k;
k1
whilereturna1

}

ScopeTable # 1.1
7 --> < a : ID >
17 --> < k : ID >

ScopeTable # 1
12 --> < f : ID >

ScopeTable with id 1.1 removed

Line 10: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f(int a)int k;
k1
whilereturna1


Line 10: unit : func_definition

int f(int a)int k;
k1
whilereturna1



Line 10: program : unit

int f(int a)int k;
k1
whilereturna1



At line no: 12: type_specifier : INT 

int

At line no: 12: type_specifier : INT 

int

At line no: 12 parameter_list  : type_specifier ID

int a

At line no: 12: type_specifier : INT 

int

At line no: 12 parameter_list  : parameter_list COMMA type_specifier ID

int a , int b

New ScopeTable with id 1.2 created

At line no: 14: type_specifier : INT 

int

At line no: 14 declaration_list : ID

x

At line no: 14: declaration_list : declaration_list COMMA ID

x,i

At line no: 14 var_declaration : type_specifier declaration_list SEMICOLON

int x,i;

At line no: 14 statement : var_declaration

int x,i;

At line no: 14 statements : statement

int x,i;


Line 15: variable : ID
x

Line 15: variable : ID
a

Line 15: factor : variable

a

Line 15: unary_expression :	factor

a

Line 15: term :	unary_expression

a

Line 15: simple_expression : term

a

Line 15: rel_expression	: simple_expression

a

Line 15: logic_expression : rel_expression

a

At line no: 15 arguments : logic_expression

a

Line 15: argument_list : arguments

a

Line 15: factor : ID LPAREN argument_list RPAREN

f(a)

Line 15: unary_expression :	factor

f(a)

Line 15: term :	unary_expression

f(a)

Line 15: simple_expression : term

f(a)

Line 15: variable : ID
a

Line 15: factor : variable

a

Line 15: unary_expression :	factor

a

Line 15: term :	unary_expression

a

Line 15: simple_expression : simple_expression ADDOP term

f(a)+a

Line 15: variable : ID
b

Line 15: factor : variable

b

Line 15: unary_expression :	factor

b

Line 15: term :	unary_expression

b

Line 15: simple_expression : simple_expression ADDOP term

T5+b

Line 15: rel_expression	: simple_expression

T6

Line 15: logic_expression : rel_expression

T6

Line 15: expression : variable ASSIGNOP logic_expression

x = T6

Line 15: expression_statement : expression SEMICOLON

x1;

At line no: 15 statement : expression_statement

x1

At line no: 15 statements : statements statement

int x,i;
 x1


Line 17: variable : ID
i

Line 17: factor : CONST_INT

0

Line 17: unary_expression :	factor

0

Line 17: term :	unary_expression

0

Line 17: simple_expression : term

0

Line 17: rel_expression	: simple_expression

0

Line 17: logic_expression : rel_expression

0

Line 17: expression : variable ASSIGNOP logic_expression

i = 0

Line 17: expression_statement : expression SEMICOLON

i1;

Line 17: variable : ID
i

Line 17: factor : variable

i

Line 17: unary_expression :	factor

i

Line 17: term :	unary_expression

i

Line 17: simple_expression : term

i

Line 17: factor : CONST_INT

7

Line 17: unary_expression :	factor

7

Line 17: term :	unary_expression

7

Line 17: simple_expression : term

7

Line 17: rel_expression : simple_expression RELOP simple_expression

i<7

Line 17: logic_expression : rel_expression

T7

Line 17: expression : logic_expression

T7

Line 17: expression_statement : expression SEMICOLON

T7;

Line 17: variable : ID
i

Line 17: unary_expression :	factor

i1

Line 17: term :	unary_expression

i1

Line 17: simple_expression : term

i1

Line 17: rel_expression	: simple_expression

i1

Line 17: logic_expression : rel_expression

i1

Line 17: expression : logic_expression

i1

Line 18: variable : ID
i

Line 18: factor : variable

i

Line 18: unary_expression :	factor

i

Line 18: term :	unary_expression

i

Line 18: factor : CONST_INT

3

Line 18: unary_expression :	factor

3

Line 18: term : term MULOP unary_expression

i%3

Line 18: simple_expression : term

T8

Line 18: factor : CONST_INT

0

Line 18: unary_expression :	factor

0

Line 18: term :	unary_expression

0

Line 18: simple_expression : term

0

Line 18: rel_expression : simple_expression RELOP simple_expression

T8==0

Line 18: logic_expression : rel_expression

T9

Line 18: expression : logic_expression

T9

Line 19: variable : ID
x

Line 19: variable : ID
x

Line 19: factor : variable

x

Line 19: unary_expression :	factor

x

Line 19: term :	unary_expression

x

Line 19: simple_expression : term

x

Line 19: factor : CONST_INT

5

Line 19: unary_expression :	factor

5

Line 19: term :	unary_expression

5

Line 19: simple_expression : simple_expression ADDOP term

x+5

Line 19: rel_expression	: simple_expression

T10

Line 19: logic_expression : rel_expression

T10

Line 19: expression : variable ASSIGNOP logic_expression

x = T10

Line 19: expression_statement : expression SEMICOLON

x1;

At line no: 19 statement : expression_statement

x1

At line no: 19 statements : statement

x1


At line no: 20 compound_statement : LCURL statements RCURL

{
x1

}

At line no: 20 statement : compound_statement

x1


Line 22: variable : ID
x

Line 22: variable : ID
x

Line 22: factor : variable

x

Line 22: unary_expression :	factor

x

Line 22: term :	unary_expression

x

Line 22: simple_expression : term

x

Line 22: factor : CONST_INT

1

Line 22: unary_expression :	factor

1

Line 22: term :	unary_expression

1

Line 22: simple_expression : simple_expression ADDOP term

x-1

Line 22: rel_expression	: simple_expression

T11

Line 22: logic_expression : rel_expression

T11

Line 22: expression : variable ASSIGNOP logic_expression

x = T11

Line 22: expression_statement : expression SEMICOLON

x1;

At line no: 22 statement : expression_statement

x1

At line no: 22 statements : statement

x1


At line no: 23 compound_statement : LCURL statements RCURL

{
x1

}

At line no: 23 statement : compound_statement

x1


At line no: 23 statement : IF LPAREN expression RPAREN statement ELSE statement

if(T9)x1
elsex1


At line no: 23 statements : statement

T9

At line no: 24 compound_statement : LCURL statements RCURL

{
T9
}

At line no: 24 statement : compound_statement

T9

line no. 24: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
for(i1T7i1)T9

At line no: 24 statements : statements statement

int x,i;
x1
 i1

Line 26: variable : ID
x

Line 26: factor : variable

x

Line 26: unary_expression :	factor

x

Line 26: term :	unary_expression

x

Line 26: simple_expression : term

x

Line 26: rel_expression	: simple_expression

x

Line 26: logic_expression : rel_expression

x

Line 26: expression : logic_expression

x

Line 26: statement : RETURN expression SEMICOLON

return x;

At line no: 26 statements : statements statement

int x,i;
x1
i1 return

At line no: 27 compound_statement : LCURL statements RCURL

{
int x,i;
x1
i1return
}

ScopeTable # 1.2
0 --> < x : ID >
7 --> < a : ID >
8 --> < b : ID >
15 --> < i : ID >

ScopeTable # 1
12 --> < f : ID >
13 --> < g : ID >

ScopeTable with id 1.2 removed

Line 27: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g(int a,int b)int x,i;
x1
i1return

Line 27: unit : func_definition

int g(int a,int b)int x,i;
x1
i1return


Line 27:  program : program unit

int f(int a)int k;
k1
whilereturna1


int g(int a,int b)int x,i;
x1
i1return



At line no: 29: type_specifier : INT 

int

New ScopeTable with id 1.3 created

At line no: 30: type_specifier : INT 

int

At line no: 30 declaration_list : ID

a

At line no: 30: declaration_list : declaration_list COMMA ID

a,b

At line no: 30: declaration_list : declaration_list COMMA ID

a,b,i

At line no: 30 var_declaration : type_specifier declaration_list SEMICOLON

int a,b,i;

At line no: 30 statement : var_declaration

int a,b,i;

At line no: 30 statements : statement

int a,b,i;


Line 31: variable : ID
a

Line 31: factor : CONST_INT

1

Line 31: unary_expression :	factor

1

Line 31: term :	unary_expression

1

Line 31: simple_expression : term

1

Line 31: rel_expression	: simple_expression

1

Line 31: logic_expression : rel_expression

1

Line 31: expression : variable ASSIGNOP logic_expression

a = 1

Line 31: expression_statement : expression SEMICOLON

a1;

At line no: 31 statement : expression_statement

a1

At line no: 31 statements : statements statement

int a,b,i;
 a1


Line 32: variable : ID
b

Line 32: factor : CONST_INT

2

Line 32: unary_expression :	factor

2

Line 32: term :	unary_expression

2

Line 32: simple_expression : term

2

Line 32: rel_expression	: simple_expression

2

Line 32: logic_expression : rel_expression

2

Line 32: expression : variable ASSIGNOP logic_expression

b = 2

Line 32: expression_statement : expression SEMICOLON

b1;

At line no: 32 statement : expression_statement

b1

At line no: 32 statements : statements statement

int a,b,i;
a1
 b1


Line 33: variable : ID
a

Line 33: variable : ID
a

Line 33: factor : variable

a

Line 33: unary_expression :	factor

a

Line 33: term :	unary_expression

a

Line 33: simple_expression : term

a

Line 33: rel_expression	: simple_expression

a

Line 33: logic_expression : rel_expression

a

At line no: 33 arguments : logic_expression

a

Line 33: variable : ID
b

Line 33: factor : variable

b

Line 33: unary_expression :	factor

b

Line 33: term :	unary_expression

b

Line 33: simple_expression : term

b

Line 33: rel_expression	: simple_expression

b

Line 33: logic_expression : rel_expression

b

Line 33: arguments : arguments COMMA logic_expression

a , b

Line 33: argument_list : arguments

a , b

Line 33: factor : ID LPAREN argument_list RPAREN

g(a , b)

Line 33: unary_expression :	factor

g(a , b)

Line 33: term :	unary_expression

g(a , b)

Line 33: simple_expression : term

g(a , b)

Line 33: rel_expression	: simple_expression

g(a , b)

Line 33: logic_expression : rel_expression

g(a , b)

Line 33: expression : variable ASSIGNOP logic_expression

a = g(a , b)

Line 33: expression_statement : expression SEMICOLON

a1;

At line no: 33 statement : expression_statement

a1

At line no: 33 statements : statements statement

int a,b,i;
a1
b1
 a1


Line 34: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

At line no: 34 statements : statements statement

int a,b,i;
a1
b1
a1
 println

Line 35: variable : ID
i

Line 35: factor : CONST_INT

0

Line 35: unary_expression :	factor

0

Line 35: term :	unary_expression

0

Line 35: simple_expression : term

0

Line 35: rel_expression	: simple_expression

0

Line 35: logic_expression : rel_expression

0

Line 35: expression : variable ASSIGNOP logic_expression

i = 0

Line 35: expression_statement : expression SEMICOLON

i1;

Line 35: variable : ID
i

Line 35: factor : variable

i

Line 35: unary_expression :	factor

i

Line 35: term :	unary_expression

i

Line 35: simple_expression : term

i

Line 35: factor : CONST_INT

4

Line 35: unary_expression :	factor

4

Line 35: term :	unary_expression

4

Line 35: simple_expression : term

4

Line 35: rel_expression : simple_expression RELOP simple_expression

i<4

Line 35: logic_expression : rel_expression

T12

Line 35: expression : logic_expression

T12

Line 35: expression_statement : expression SEMICOLON

T12;

Line 35: variable : ID
i

Line 35: unary_expression :	factor

i1

Line 35: term :	unary_expression

i1

Line 35: simple_expression : term

i1

Line 35: rel_expression	: simple_expression

i1

Line 35: logic_expression : rel_expression

i1

Line 35: expression : logic_expression

i1

Line 36: variable : ID
a

Line 36: factor : CONST_INT

3

Line 36: unary_expression :	factor

3

Line 36: term :	unary_expression

3

Line 36: simple_expression : term

3

Line 36: rel_expression	: simple_expression

3

Line 36: logic_expression : rel_expression

3

Line 36: expression : variable ASSIGNOP logic_expression

a = 3

Line 36: expression_statement : expression SEMICOLON

a1;

At line no: 36 statement : expression_statement

a1

At line no: 36 statements : statement

a1


Line 37: variable : ID
a

Line 37: factor : variable

a

Line 37: unary_expression :	factor

a

Line 37: term :	unary_expression

a

Line 37: simple_expression : term

a

Line 37: factor : CONST_INT

0

Line 37: unary_expression :	factor

0

Line 37: term :	unary_expression

0

Line 37: simple_expression : term

0

Line 37: rel_expression : simple_expression RELOP simple_expression

a>0

Line 37: logic_expression : rel_expression

T13

Line 37: expression : logic_expression

T13

Line 38: variable : ID
b

Line 38: unary_expression :	factor

b1

Line 38: term :	unary_expression

b1

Line 38: simple_expression : term

b1

Line 38: rel_expression	: simple_expression

b1

Line 38: logic_expression : rel_expression

b1

Line 38: expression : logic_expression

b1

Line 38: expression_statement : expression SEMICOLON

b1;

At line no: 38 statement : expression_statement

b1

At line no: 38 statements : statement

b1


Line 39: variable : ID
a

Line 39: unary_expression :	factor

T14

Line 39: term :	unary_expression

T14

Line 39: simple_expression : term

T14

Line 39: rel_expression	: simple_expression

T14

Line 39: logic_expression : rel_expression

T14

Line 39: expression : logic_expression

T14

Line 39: expression_statement : expression SEMICOLON

T14;

At line no: 39 statement : expression_statement

T14

At line no: 39 statements : statements statement

b1
 T14


At line no: 40 compound_statement : LCURL statements RCURL

{
b1
T14

}

At line no: 40 statement : compound_statement

b1
T14


At line no: 40 statement : WHILE LPAREN expression RPAREN statement

while(T13)b1
T14


At line no: 40 statements : statements statement

a1
 while

At line no: 41 compound_statement : LCURL statements RCURL

{
a1
while
}

At line no: 41 statement : compound_statement

a1
while

line no. 41: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
for(i1T12i1)a1
while

At line no: 41 statements : statements statement

int a,b,i;
a1
b1
a1
println i1

Line 42: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

At line no: 42 statements : statements statement

int a,b,i;
a1
b1
a1
printlni1 println

Line 43: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(b);

At line no: 43 statements : statements statement

int a,b,i;
a1
b1
a1
printlni1println println

Line 44: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(i);

At line no: 44 statements : statements statement

int a,b,i;
a1
b1
a1
printlni1printlnprintln println

Line 45: factor : CONST_INT

0

Line 45: unary_expression :	factor

0

Line 45: term :	unary_expression

0

Line 45: simple_expression : term

0

Line 45: rel_expression	: simple_expression

0

Line 45: logic_expression : rel_expression

0

Line 45: expression : logic_expression

0

Line 45: statement : RETURN expression SEMICOLON

return 0;

At line no: 45 statements : statements statement

int a,b,i;
a1
b1
a1
printlni1printlnprintlnprintln return

At line no: 46 compound_statement : LCURL statements RCURL

{
int a,b,i;
a1
b1
a1
printlni1printlnprintlnprintlnreturn
}

ScopeTable # 1.3
7 --> < a : ID >
8 --> < b : ID >
15 --> < i : ID >

ScopeTable # 1
1 --> < main : ID >
12 --> < f : ID >
13 --> < g : ID >

ScopeTable with id 1.3 removed

Line 46: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main()int a,b,i;
a1
b1
a1
printlni1printlnprintlnprintlnreturn

Line 46: unit : func_definition

int main()int a,b,i;
a1
b1
a1
printlni1printlnprintlnprintlnreturn


Line 46:  program : program unit

int f(int a)int k;
k1
whilereturna1


int g(int a,int b)int x,i;
x1
i1return

int main()int a,b,i;
a1
b1
a1
printlni1printlnprintlnprintlnreturn



		Symbol Table : 

ScopeTable # 1
1 --> < main : ID >
12 --> < f : ID >
13 --> < g : ID >

Total Lines : 47 

Total Errors : 0 

