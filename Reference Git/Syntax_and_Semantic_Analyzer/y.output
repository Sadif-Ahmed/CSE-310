Terminals unused in grammar

    DO
    BREAK
    CHAR
    DOUBLE
    SWITCH
    CASE
    DEFAULT
    CONTINUE
    CONST_CHAR


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program unit
    3        | unit

    4 unit: var_declaration
    5     | func_declaration
    6     | func_definition

    7 func_declaration: type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
    8                 | type_specifier ID LPAREN RPAREN SEMICOLON

    9 $@1: %empty

   10 $@2: %empty

   11 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@1 compound_statement $@2

   12 $@3: %empty

   13 $@4: %empty

   14 func_definition: type_specifier ID LPAREN RPAREN $@3 compound_statement $@4

   15 parameter_list: parameter_list COMMA type_specifier ID
   16               | parameter_list COMMA type_specifier
   17               | type_specifier ID
   18               | type_specifier
   19               | type_specifier error

   20 compound_statement: LCURL statements RCURL
   21                   | LCURL RCURL

   22 var_declaration: type_specifier declaration_list SEMICOLON
   23                | error SEMICOLON

   24 type_specifier: INT
   25               | FLOAT
   26               | VOID

   27 declaration_list: declaration_list COMMA ID
   28                 | declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
   29                 | ID
   30                 | ID LTHIRD CONST_INT RTHIRD
   31                 | declaration_list error

   32 statements: statement
   33           | statements statement

   34 statement: var_declaration
   35          | expression_statement
   36          | compound_statement
   37          | FOR LPAREN expression_statement expression_statement expression RPAREN statement
   38          | IF LPAREN expression RPAREN statement
   39          | IF LPAREN expression RPAREN statement ELSE statement
   40          | WHILE LPAREN expression RPAREN statement
   41          | PRINTLN LPAREN ID RPAREN SEMICOLON
   42          | RETURN expression SEMICOLON

   43 expression_statement: SEMICOLON
   44                     | expression SEMICOLON
   45                     | expression error

   46 variable: ID
   47         | ID LTHIRD expression RTHIRD

   48 expression: logic_expression
   49           | variable ASSIGNOP logic_expression

   50 logic_expression: rel_expression
   51                 | rel_expression LOGICOP rel_expression

   52 rel_expression: simple_expression
   53               | simple_expression RELOP simple_expression

   54 simple_expression: term
   55                  | simple_expression ADDOP term

   56 term: unary_expression
   57     | term MULOP unary_expression

   58 unary_expression: ADDOP unary_expression
   59                 | NOT unary_expression
   60                 | factor

   61 factor: variable
   62       | ID LPAREN argument_list RPAREN
   63       | LPAREN expression RPAREN
   64       | CONST_INT
   65       | CONST_FLOAT
   66       | variable INCOP
   67       | variable DECOP

   68 argument_list: arguments
   69              | %empty

   70 arguments: arguments COMMA logic_expression
   71          | logic_expression


Terminals, with rules where they appear

    $end (0) 0
    error (256) 19 23 31 45
    IF (258) 38 39
    ELSE (259) 39
    FOR (260) 37
    WHILE (261) 40
    DO (262)
    BREAK (263)
    INT (264) 24
    CHAR (265)
    FLOAT (266) 25
    DOUBLE (267)
    VOID (268) 26
    RETURN (269) 42
    SWITCH (270)
    CASE (271)
    DEFAULT (272)
    CONTINUE (273)
    ASSIGNOP (274) 49
    INCOP (275) 66
    DECOP (276) 67
    NOT (277) 59
    LPAREN (278) 7 8 11 14 37 38 39 40 41 62 63
    RPAREN (279) 7 8 11 14 37 38 39 40 41 62 63
    LCURL (280) 20 21
    RCURL (281) 20 21
    LTHIRD (282) 28 30 47
    RTHIRD (283) 28 30 47
    COMMA (284) 15 16 27 28 70
    SEMICOLON (285) 7 8 22 23 41 42 43 44
    PRINTLN (286) 41
    CONST_INT <symbol> (287) 28 30 64
    CONST_FLOAT <symbol> (288) 65
    CONST_CHAR <symbol> (289)
    ID <symbol> (290) 7 8 11 14 15 17 27 28 29 30 41 46 47 62
    ADDOP <symbol> (291) 55 58
    MULOP <symbol> (292) 57
    RELOP <symbol> (293) 53
    LOGICOP <symbol> (294) 51
    LOWER_THAN_ELSE (295)


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    start (42)
        on left: 1
        on right: 0
    program <symbol> (43)
        on left: 2 3
        on right: 1 2
    unit <symbol> (44)
        on left: 4 5 6
        on right: 2 3
    func_declaration <symbol> (45)
        on left: 7 8
        on right: 5
    func_definition <symbol> (46)
        on left: 11 14
        on right: 6
    $@1 (47)
        on left: 9
        on right: 11
    $@2 (48)
        on left: 10
        on right: 11
    $@3 (49)
        on left: 12
        on right: 14
    $@4 (50)
        on left: 13
        on right: 14
    parameter_list <symbol> (51)
        on left: 15 16 17 18 19
        on right: 7 11 15 16
    compound_statement <symbol> (52)
        on left: 20 21
        on right: 11 14 36
    var_declaration <symbol> (53)
        on left: 22 23
        on right: 4 34
    type_specifier <symbol> (54)
        on left: 24 25 26
        on right: 7 8 11 14 15 16 17 18 19 22
    declaration_list <symbol> (55)
        on left: 27 28 29 30 31
        on right: 22 27 28 31
    statements <symbol> (56)
        on left: 32 33
        on right: 20 33
    statement <symbol> (57)
        on left: 34 35 36 37 38 39 40 41 42
        on right: 32 33 37 38 39 40
    expression_statement <symbol> (58)
        on left: 43 44 45
        on right: 35 37
    variable <symbol> (59)
        on left: 46 47
        on right: 49 61 66 67
    expression <symbol> (60)
        on left: 48 49
        on right: 37 38 39 40 42 44 45 47 63
    logic_expression <symbol> (61)
        on left: 50 51
        on right: 48 49 70 71
    rel_expression <symbol> (62)
        on left: 52 53
        on right: 50 51
    simple_expression <symbol> (63)
        on left: 54 55
        on right: 52 53 55
    term <symbol> (64)
        on left: 56 57
        on right: 54 55 57
    unary_expression <symbol> (65)
        on left: 58 59 60
        on right: 56 57 58 59
    factor <symbol> (66)
        on left: 61 62 63 64 65 66 67
        on right: 60
    argument_list <symbol> (67)
        on left: 68 69
        on right: 62
    arguments <symbol> (68)
        on left: 70 71
        on right: 68 70


State 0

    0 $accept: • start $end

    error  shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    VOID   shift, and go to state 4

    start             go to state 5
    program           go to state 6
    unit              go to state 7
    func_declaration  go to state 8
    func_definition   go to state 9
    var_declaration   go to state 10
    type_specifier    go to state 11


State 1

   23 var_declaration: error • SEMICOLON

    SEMICOLON  shift, and go to state 12


State 2

   24 type_specifier: INT •

    $default  reduce using rule 24 (type_specifier)


State 3

   25 type_specifier: FLOAT •

    $default  reduce using rule 25 (type_specifier)


State 4

   26 type_specifier: VOID •

    $default  reduce using rule 26 (type_specifier)


State 5

    0 $accept: start • $end

    $end  shift, and go to state 13


State 6

    1 start: program •
    2 program: program • unit

    error  shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    VOID   shift, and go to state 4

    $end  reduce using rule 1 (start)

    unit              go to state 14
    func_declaration  go to state 8
    func_definition   go to state 9
    var_declaration   go to state 10
    type_specifier    go to state 11


State 7

    3 program: unit •

    $default  reduce using rule 3 (program)


State 8

    5 unit: func_declaration •

    $default  reduce using rule 5 (unit)


State 9

    6 unit: func_definition •

    $default  reduce using rule 6 (unit)


State 10

    4 unit: var_declaration •

    $default  reduce using rule 4 (unit)


State 11

    7 func_declaration: type_specifier • ID LPAREN parameter_list RPAREN SEMICOLON
    8                 | type_specifier • ID LPAREN RPAREN SEMICOLON
   11 func_definition: type_specifier • ID LPAREN parameter_list RPAREN $@1 compound_statement $@2
   14                | type_specifier • ID LPAREN RPAREN $@3 compound_statement $@4
   22 var_declaration: type_specifier • declaration_list SEMICOLON

    ID  shift, and go to state 15

    declaration_list  go to state 16


State 12

   23 var_declaration: error SEMICOLON •

    $default  reduce using rule 23 (var_declaration)


State 13

    0 $accept: start $end •

    $default  accept


State 14

    2 program: program unit •

    $default  reduce using rule 2 (program)


State 15

    7 func_declaration: type_specifier ID • LPAREN parameter_list RPAREN SEMICOLON
    8                 | type_specifier ID • LPAREN RPAREN SEMICOLON
   11 func_definition: type_specifier ID • LPAREN parameter_list RPAREN $@1 compound_statement $@2
   14                | type_specifier ID • LPAREN RPAREN $@3 compound_statement $@4
   29 declaration_list: ID •
   30                 | ID • LTHIRD CONST_INT RTHIRD

    LPAREN  shift, and go to state 17
    LTHIRD  shift, and go to state 18

    $default  reduce using rule 29 (declaration_list)


State 16

   22 var_declaration: type_specifier declaration_list • SEMICOLON
   27 declaration_list: declaration_list • COMMA ID
   28                 | declaration_list • COMMA ID LTHIRD CONST_INT RTHIRD
   31                 | declaration_list • error

    error      shift, and go to state 19
    COMMA      shift, and go to state 20
    SEMICOLON  shift, and go to state 21


State 17

    7 func_declaration: type_specifier ID LPAREN • parameter_list RPAREN SEMICOLON
    8                 | type_specifier ID LPAREN • RPAREN SEMICOLON
   11 func_definition: type_specifier ID LPAREN • parameter_list RPAREN $@1 compound_statement $@2
   14                | type_specifier ID LPAREN • RPAREN $@3 compound_statement $@4

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    VOID    shift, and go to state 4
    RPAREN  shift, and go to state 22

    parameter_list  go to state 23
    type_specifier  go to state 24


State 18

   30 declaration_list: ID LTHIRD • CONST_INT RTHIRD

    CONST_INT  shift, and go to state 25


State 19

   31 declaration_list: declaration_list error •

    $default  reduce using rule 31 (declaration_list)


State 20

   27 declaration_list: declaration_list COMMA • ID
   28                 | declaration_list COMMA • ID LTHIRD CONST_INT RTHIRD

    ID  shift, and go to state 26


State 21

   22 var_declaration: type_specifier declaration_list SEMICOLON •

    $default  reduce using rule 22 (var_declaration)


State 22

    8 func_declaration: type_specifier ID LPAREN RPAREN • SEMICOLON
   14 func_definition: type_specifier ID LPAREN RPAREN • $@3 compound_statement $@4

    SEMICOLON  shift, and go to state 27

    $default  reduce using rule 12 ($@3)

    $@3  go to state 28


State 23

    7 func_declaration: type_specifier ID LPAREN parameter_list • RPAREN SEMICOLON
   11 func_definition: type_specifier ID LPAREN parameter_list • RPAREN $@1 compound_statement $@2
   15 parameter_list: parameter_list • COMMA type_specifier ID
   16               | parameter_list • COMMA type_specifier

    RPAREN  shift, and go to state 29
    COMMA   shift, and go to state 30


State 24

   17 parameter_list: type_specifier • ID
   18               | type_specifier •
   19               | type_specifier • error

    error  shift, and go to state 31
    ID     shift, and go to state 32

    RPAREN  reduce using rule 18 (parameter_list)
    COMMA   reduce using rule 18 (parameter_list)


State 25

   30 declaration_list: ID LTHIRD CONST_INT • RTHIRD

    RTHIRD  shift, and go to state 33


State 26

   27 declaration_list: declaration_list COMMA ID •
   28                 | declaration_list COMMA ID • LTHIRD CONST_INT RTHIRD

    LTHIRD  shift, and go to state 34

    $default  reduce using rule 27 (declaration_list)


State 27

    8 func_declaration: type_specifier ID LPAREN RPAREN SEMICOLON •

    $default  reduce using rule 8 (func_declaration)


State 28

   14 func_definition: type_specifier ID LPAREN RPAREN $@3 • compound_statement $@4

    LCURL  shift, and go to state 35

    compound_statement  go to state 36


State 29

    7 func_declaration: type_specifier ID LPAREN parameter_list RPAREN • SEMICOLON
   11 func_definition: type_specifier ID LPAREN parameter_list RPAREN • $@1 compound_statement $@2

    SEMICOLON  shift, and go to state 37

    $default  reduce using rule 9 ($@1)

    $@1  go to state 38


State 30

   15 parameter_list: parameter_list COMMA • type_specifier ID
   16               | parameter_list COMMA • type_specifier

    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    VOID   shift, and go to state 4

    type_specifier  go to state 39


State 31

   19 parameter_list: type_specifier error •

    $default  reduce using rule 19 (parameter_list)


State 32

   17 parameter_list: type_specifier ID •

    $default  reduce using rule 17 (parameter_list)


State 33

   30 declaration_list: ID LTHIRD CONST_INT RTHIRD •

    $default  reduce using rule 30 (declaration_list)


State 34

   28 declaration_list: declaration_list COMMA ID LTHIRD • CONST_INT RTHIRD

    CONST_INT  shift, and go to state 40


State 35

   20 compound_statement: LCURL • statements RCURL
   21                   | LCURL • RCURL

    error        shift, and go to state 1
    IF           shift, and go to state 41
    FOR          shift, and go to state 42
    WHILE        shift, and go to state 43
    INT          shift, and go to state 2
    FLOAT        shift, and go to state 3
    VOID         shift, and go to state 4
    RETURN       shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 35
    RCURL        shift, and go to state 47
    SEMICOLON    shift, and go to state 48
    PRINTLN      shift, and go to state 49
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    compound_statement    go to state 54
    var_declaration       go to state 55
    type_specifier        go to state 56
    statements            go to state 57
    statement             go to state 58
    expression_statement  go to state 59
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 36

   14 func_definition: type_specifier ID LPAREN RPAREN $@3 compound_statement • $@4

    $default  reduce using rule 13 ($@4)

    $@4  go to state 68


State 37

    7 func_declaration: type_specifier ID LPAREN parameter_list RPAREN SEMICOLON •

    $default  reduce using rule 7 (func_declaration)


State 38

   11 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@1 • compound_statement $@2

    LCURL  shift, and go to state 35

    compound_statement  go to state 69


State 39

   15 parameter_list: parameter_list COMMA type_specifier • ID
   16               | parameter_list COMMA type_specifier •

    ID  shift, and go to state 70

    $default  reduce using rule 16 (parameter_list)


State 40

   28 declaration_list: declaration_list COMMA ID LTHIRD CONST_INT • RTHIRD

    RTHIRD  shift, and go to state 71


State 41

   38 statement: IF • LPAREN expression RPAREN statement
   39          | IF • LPAREN expression RPAREN statement ELSE statement

    LPAREN  shift, and go to state 72


State 42

   37 statement: FOR • LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN  shift, and go to state 73


State 43

   40 statement: WHILE • LPAREN expression RPAREN statement

    LPAREN  shift, and go to state 74


State 44

   42 statement: RETURN • expression SEMICOLON

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 60
    expression         go to state 75
    logic_expression   go to state 62
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 45

   59 unary_expression: NOT • unary_expression

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable          go to state 76
    unary_expression  go to state 77
    factor            go to state 67


State 46

   63 factor: LPAREN • expression RPAREN

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 60
    expression         go to state 78
    logic_expression   go to state 62
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 47

   21 compound_statement: LCURL RCURL •

    $default  reduce using rule 21 (compound_statement)


State 48

   43 expression_statement: SEMICOLON •

    $default  reduce using rule 43 (expression_statement)


State 49

   41 statement: PRINTLN • LPAREN ID RPAREN SEMICOLON

    LPAREN  shift, and go to state 79


State 50

   64 factor: CONST_INT •

    $default  reduce using rule 64 (factor)


State 51

   65 factor: CONST_FLOAT •

    $default  reduce using rule 65 (factor)


State 52

   46 variable: ID •
   47         | ID • LTHIRD expression RTHIRD
   62 factor: ID • LPAREN argument_list RPAREN

    LPAREN  shift, and go to state 80
    LTHIRD  shift, and go to state 81

    $default  reduce using rule 46 (variable)


State 53

   58 unary_expression: ADDOP • unary_expression

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable          go to state 76
    unary_expression  go to state 82
    factor            go to state 67


State 54

   36 statement: compound_statement •

    $default  reduce using rule 36 (statement)


State 55

   34 statement: var_declaration •

    $default  reduce using rule 34 (statement)


State 56

   22 var_declaration: type_specifier • declaration_list SEMICOLON

    ID  shift, and go to state 83

    declaration_list  go to state 16


State 57

   20 compound_statement: LCURL statements • RCURL
   33 statements: statements • statement

    error        shift, and go to state 1
    IF           shift, and go to state 41
    FOR          shift, and go to state 42
    WHILE        shift, and go to state 43
    INT          shift, and go to state 2
    FLOAT        shift, and go to state 3
    VOID         shift, and go to state 4
    RETURN       shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 35
    RCURL        shift, and go to state 84
    SEMICOLON    shift, and go to state 48
    PRINTLN      shift, and go to state 49
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    compound_statement    go to state 54
    var_declaration       go to state 55
    type_specifier        go to state 56
    statement             go to state 85
    expression_statement  go to state 59
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 58

   32 statements: statement •

    $default  reduce using rule 32 (statements)


State 59

   35 statement: expression_statement •

    $default  reduce using rule 35 (statement)


State 60

   49 expression: variable • ASSIGNOP logic_expression
   61 factor: variable •
   66       | variable • INCOP
   67       | variable • DECOP

    ASSIGNOP  shift, and go to state 86
    INCOP     shift, and go to state 87
    DECOP     shift, and go to state 88

    $default  reduce using rule 61 (factor)


State 61

   44 expression_statement: expression • SEMICOLON
   45                     | expression • error

    error      shift, and go to state 89
    SEMICOLON  shift, and go to state 90


State 62

   48 expression: logic_expression •

    $default  reduce using rule 48 (expression)


State 63

   50 logic_expression: rel_expression •
   51                 | rel_expression • LOGICOP rel_expression

    LOGICOP  shift, and go to state 91

    $default  reduce using rule 50 (logic_expression)


State 64

   52 rel_expression: simple_expression •
   53               | simple_expression • RELOP simple_expression
   55 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 92
    RELOP  shift, and go to state 93

    $default  reduce using rule 52 (rel_expression)


State 65

   54 simple_expression: term •
   57 term: term • MULOP unary_expression

    MULOP  shift, and go to state 94

    $default  reduce using rule 54 (simple_expression)


State 66

   56 term: unary_expression •

    $default  reduce using rule 56 (term)


State 67

   60 unary_expression: factor •

    $default  reduce using rule 60 (unary_expression)


State 68

   14 func_definition: type_specifier ID LPAREN RPAREN $@3 compound_statement $@4 •

    $default  reduce using rule 14 (func_definition)


State 69

   11 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@1 compound_statement • $@2

    $default  reduce using rule 10 ($@2)

    $@2  go to state 95


State 70

   15 parameter_list: parameter_list COMMA type_specifier ID •

    $default  reduce using rule 15 (parameter_list)


State 71

   28 declaration_list: declaration_list COMMA ID LTHIRD CONST_INT RTHIRD •

    $default  reduce using rule 28 (declaration_list)


State 72

   38 statement: IF LPAREN • expression RPAREN statement
   39          | IF LPAREN • expression RPAREN statement ELSE statement

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 60
    expression         go to state 96
    logic_expression   go to state 62
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 73

   37 statement: FOR LPAREN • expression_statement expression_statement expression RPAREN statement

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    SEMICOLON    shift, and go to state 48
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    expression_statement  go to state 97
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 74

   40 statement: WHILE LPAREN • expression RPAREN statement

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 60
    expression         go to state 98
    logic_expression   go to state 62
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 75

   42 statement: RETURN expression • SEMICOLON

    SEMICOLON  shift, and go to state 99


State 76

   61 factor: variable •
   66       | variable • INCOP
   67       | variable • DECOP

    INCOP  shift, and go to state 87
    DECOP  shift, and go to state 88

    $default  reduce using rule 61 (factor)


State 77

   59 unary_expression: NOT unary_expression •

    $default  reduce using rule 59 (unary_expression)


State 78

   63 factor: LPAREN expression • RPAREN

    RPAREN  shift, and go to state 100


State 79

   41 statement: PRINTLN LPAREN • ID RPAREN SEMICOLON

    ID  shift, and go to state 101


State 80

   62 factor: ID LPAREN • argument_list RPAREN

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    $default  reduce using rule 69 (argument_list)

    variable           go to state 76
    logic_expression   go to state 102
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67
    argument_list      go to state 103
    arguments          go to state 104


State 81

   47 variable: ID LTHIRD • expression RTHIRD

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 60
    expression         go to state 105
    logic_expression   go to state 62
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 82

   58 unary_expression: ADDOP unary_expression •

    $default  reduce using rule 58 (unary_expression)


State 83

   29 declaration_list: ID •
   30                 | ID • LTHIRD CONST_INT RTHIRD

    LTHIRD  shift, and go to state 18

    $default  reduce using rule 29 (declaration_list)


State 84

   20 compound_statement: LCURL statements RCURL •

    $default  reduce using rule 20 (compound_statement)


State 85

   33 statements: statements statement •

    $default  reduce using rule 33 (statements)


State 86

   49 expression: variable ASSIGNOP • logic_expression

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 76
    logic_expression   go to state 106
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 87

   66 factor: variable INCOP •

    $default  reduce using rule 66 (factor)


State 88

   67 factor: variable DECOP •

    $default  reduce using rule 67 (factor)


State 89

   45 expression_statement: expression error •

    $default  reduce using rule 45 (expression_statement)


State 90

   44 expression_statement: expression SEMICOLON •

    $default  reduce using rule 44 (expression_statement)


State 91

   51 logic_expression: rel_expression LOGICOP • rel_expression

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 76
    rel_expression     go to state 107
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 92

   55 simple_expression: simple_expression ADDOP • term

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable          go to state 76
    term              go to state 108
    unary_expression  go to state 66
    factor            go to state 67


State 93

   53 rel_expression: simple_expression RELOP • simple_expression

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 76
    simple_expression  go to state 109
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 94

   57 term: term MULOP • unary_expression

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable          go to state 76
    unary_expression  go to state 110
    factor            go to state 67


State 95

   11 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@1 compound_statement $@2 •

    $default  reduce using rule 11 (func_definition)


State 96

   38 statement: IF LPAREN expression • RPAREN statement
   39          | IF LPAREN expression • RPAREN statement ELSE statement

    RPAREN  shift, and go to state 111


State 97

   37 statement: FOR LPAREN expression_statement • expression_statement expression RPAREN statement

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    SEMICOLON    shift, and go to state 48
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    expression_statement  go to state 112
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 98

   40 statement: WHILE LPAREN expression • RPAREN statement

    RPAREN  shift, and go to state 113


State 99

   42 statement: RETURN expression SEMICOLON •

    $default  reduce using rule 42 (statement)


State 100

   63 factor: LPAREN expression RPAREN •

    $default  reduce using rule 63 (factor)


State 101

   41 statement: PRINTLN LPAREN ID • RPAREN SEMICOLON

    RPAREN  shift, and go to state 114


State 102

   71 arguments: logic_expression •

    $default  reduce using rule 71 (arguments)


State 103

   62 factor: ID LPAREN argument_list • RPAREN

    RPAREN  shift, and go to state 115


State 104

   68 argument_list: arguments •
   70 arguments: arguments • COMMA logic_expression

    COMMA  shift, and go to state 116

    $default  reduce using rule 68 (argument_list)


State 105

   47 variable: ID LTHIRD expression • RTHIRD

    RTHIRD  shift, and go to state 117


State 106

   49 expression: variable ASSIGNOP logic_expression •

    $default  reduce using rule 49 (expression)


State 107

   51 logic_expression: rel_expression LOGICOP rel_expression •

    $default  reduce using rule 51 (logic_expression)


State 108

   55 simple_expression: simple_expression ADDOP term •
   57 term: term • MULOP unary_expression

    MULOP  shift, and go to state 94

    $default  reduce using rule 55 (simple_expression)


State 109

   53 rel_expression: simple_expression RELOP simple_expression •
   55 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 92

    $default  reduce using rule 53 (rel_expression)


State 110

   57 term: term MULOP unary_expression •

    $default  reduce using rule 57 (term)


State 111

   38 statement: IF LPAREN expression RPAREN • statement
   39          | IF LPAREN expression RPAREN • statement ELSE statement

    error        shift, and go to state 1
    IF           shift, and go to state 41
    FOR          shift, and go to state 42
    WHILE        shift, and go to state 43
    INT          shift, and go to state 2
    FLOAT        shift, and go to state 3
    VOID         shift, and go to state 4
    RETURN       shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 35
    SEMICOLON    shift, and go to state 48
    PRINTLN      shift, and go to state 49
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    compound_statement    go to state 54
    var_declaration       go to state 55
    type_specifier        go to state 56
    statement             go to state 118
    expression_statement  go to state 59
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 112

   37 statement: FOR LPAREN expression_statement expression_statement • expression RPAREN statement

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 60
    expression         go to state 119
    logic_expression   go to state 62
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 113

   40 statement: WHILE LPAREN expression RPAREN • statement

    error        shift, and go to state 1
    IF           shift, and go to state 41
    FOR          shift, and go to state 42
    WHILE        shift, and go to state 43
    INT          shift, and go to state 2
    FLOAT        shift, and go to state 3
    VOID         shift, and go to state 4
    RETURN       shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 35
    SEMICOLON    shift, and go to state 48
    PRINTLN      shift, and go to state 49
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    compound_statement    go to state 54
    var_declaration       go to state 55
    type_specifier        go to state 56
    statement             go to state 120
    expression_statement  go to state 59
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 114

   41 statement: PRINTLN LPAREN ID RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 121


State 115

   62 factor: ID LPAREN argument_list RPAREN •

    $default  reduce using rule 62 (factor)


State 116

   70 arguments: arguments COMMA • logic_expression

    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    variable           go to state 76
    logic_expression   go to state 122
    rel_expression     go to state 63
    simple_expression  go to state 64
    term               go to state 65
    unary_expression   go to state 66
    factor             go to state 67


State 117

   47 variable: ID LTHIRD expression RTHIRD •

    $default  reduce using rule 47 (variable)


State 118

   38 statement: IF LPAREN expression RPAREN statement •
   39          | IF LPAREN expression RPAREN statement • ELSE statement

    ELSE  shift, and go to state 123

    $default  reduce using rule 38 (statement)


State 119

   37 statement: FOR LPAREN expression_statement expression_statement expression • RPAREN statement

    RPAREN  shift, and go to state 124


State 120

   40 statement: WHILE LPAREN expression RPAREN statement •

    $default  reduce using rule 40 (statement)


State 121

   41 statement: PRINTLN LPAREN ID RPAREN SEMICOLON •

    $default  reduce using rule 41 (statement)


State 122

   70 arguments: arguments COMMA logic_expression •

    $default  reduce using rule 70 (arguments)


State 123

   39 statement: IF LPAREN expression RPAREN statement ELSE • statement

    error        shift, and go to state 1
    IF           shift, and go to state 41
    FOR          shift, and go to state 42
    WHILE        shift, and go to state 43
    INT          shift, and go to state 2
    FLOAT        shift, and go to state 3
    VOID         shift, and go to state 4
    RETURN       shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 35
    SEMICOLON    shift, and go to state 48
    PRINTLN      shift, and go to state 49
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    compound_statement    go to state 54
    var_declaration       go to state 55
    type_specifier        go to state 56
    statement             go to state 125
    expression_statement  go to state 59
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 124

   37 statement: FOR LPAREN expression_statement expression_statement expression RPAREN • statement

    error        shift, and go to state 1
    IF           shift, and go to state 41
    FOR          shift, and go to state 42
    WHILE        shift, and go to state 43
    INT          shift, and go to state 2
    FLOAT        shift, and go to state 3
    VOID         shift, and go to state 4
    RETURN       shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 35
    SEMICOLON    shift, and go to state 48
    PRINTLN      shift, and go to state 49
    CONST_INT    shift, and go to state 50
    CONST_FLOAT  shift, and go to state 51
    ID           shift, and go to state 52
    ADDOP        shift, and go to state 53

    compound_statement    go to state 54
    var_declaration       go to state 55
    type_specifier        go to state 56
    statement             go to state 126
    expression_statement  go to state 59
    variable              go to state 60
    expression            go to state 61
    logic_expression      go to state 62
    rel_expression        go to state 63
    simple_expression     go to state 64
    term                  go to state 65
    unary_expression      go to state 66
    factor                go to state 67


State 125

   39 statement: IF LPAREN expression RPAREN statement ELSE statement •

    $default  reduce using rule 39 (statement)


State 126

   37 statement: FOR LPAREN expression_statement expression_statement expression RPAREN statement •

    $default  reduce using rule 37 (statement)
