MAIN PROC

	;INITIALIZE DATA SEGMENT
	MOV AX, @DATA
	MOV DS, AX

	PUSH BP
	MOV BP , SP

	SUB SP , 2
	SUB SP , 2
	SUB SP , 2
	SUB SP , 2
	SUB SP , 2
	SUB SP , 2
	MOV AX, i1
	INC AX
	MOV i1, AX

	MOV AX, 2
	MOV BX, j1
	MUL BX
	MOV T2, AX

	MOV AX, [BP - 2]
	MOV BX, 9
	XOR DX, DX
	DIV BX
	MOV T4 , DX
	MOV AX, [BP - 12]
	INC AX
	MOV [BP - 12], AX

	MOV AX, [BP - 12]
	NEG AX
	MOV T9, AX
	ADD SP, 12
	POP BP


	MOV AX, 4CH
	INT 21H
MAIN ENDP

END MAIN

.MODEL SMALL
.STACK 100H
.DATA
	i1 DW ?
	j1 DW ?
	T1 DW ?
	T2 DW ?
	T3 DW ?
	T4 DW ?
	T5 DW ?
	T6 DW ?
	T7 DW ?
	T8 DW ?
	T9 DW ?
.CODE
;------printing procedure----
PRINT_ID PROC

	;SAVE IN STACK
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	;CHECK IF NEGATIVE
	OR AX, AX
	JGE PRINT_NUMBER

	;PRINT MINUS SIGN
	PUSH AX
	MOV AH, 2
	MOV DL, '-'
	INT 21H
	POP AX

	NEG AX

	PRINT_NUMBER:
	XOR CX, CX
	MOV BX, 10D

	REPEAT_CALC:

		;AX:DX- QUOTIENT:REMAINDER
		XOR DX, DX
		DIV BX  ;DIVIDE BY 10
		PUSH DX ;PUSH THE REMAINDER IN STACK

		INC CX

		OR AX, AX
		JNZ REPEAT_CALC

	MOV AH, 2

	PRINT_LOOP:
		POP DX
		ADD DL, 30H
		INT 21H
		LOOP PRINT_LOOP

	;NEWLINE
	MOV AH, 2
	MOV DL, 0AH
	INT 21H
	MOV DL, 0DH
	INT 21H

	POP DX
	POP CX
	POP BX
	POP AX

	RET
PRINT_ID ENDP

