Line# 1: Token <SINGLE LINE COMMENT> Lexeme //int x[10]; found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT 
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier : INT 
Line# 4: Token <ID> Lexeme i found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 4: Token <ID> Lexeme x found
Line# 4: Token <LSQUARE> Lexeme [ found
Line# 4: Token <CONST_INT> Lexeme 10 found
Line# 4: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE
Line# 4: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 5: Token <ID> Lexeme x found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 5: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 5: Token <ASSIGNOP> Lexeme = found
Line# 5: Token <ADDOP> Lexeme - found
Line# 5: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression :	factor
unary_expression : ADDOP unary_expression
term :	unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 6: Token <ID> Lexeme x found
Line# 6: Token <LSQUARE> Lexeme [ found
Line# 6: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 6: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 6: Token <ASSIGNOP> Lexeme = found
Line# 6: Token <ID> Lexeme x found
Line# 6: Token <LSQUARE> Lexeme [ found
Line# 6: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 6: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 6: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 7: Token <ID> Lexeme i found
Line# 7: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 7: Token <ID> Lexeme x found
Line# 7: Token <LSQUARE> Lexeme [ found
Line# 7: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 7: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 7: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 8: Token <PRINTLN> Lexeme println found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <ID> Lexeme i found
Line# 8: Token <RPAREN> Lexeme ) found
Line# 8: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 9: Token <ID> Lexeme x found
Line# 9: Token <LSQUARE> Lexeme [ found
Line# 9: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 9: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 9: Token <ASSIGNOP> Lexeme = found
Line# 9: Token <ID> Lexeme x found
Line# 9: Token <LSQUARE> Lexeme [ found
Line# 9: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 9: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 9: Token <INCOP> Lexeme ++ found
factor	: variable INCOP
unary_expression :	factor
term :	unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 10: Token <ID> Lexeme i found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 10: Token <ID> Lexeme x found
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 10: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 10: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme i found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 12: Token <ID> Lexeme i found
Line# 12: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 12: Token <ID> Lexeme x found
Line# 12: Token <LSQUARE> Lexeme [ found
Line# 12: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 12: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 12: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 13: Token <PRINTLN> Lexeme println found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <ID> Lexeme i found
Line# 13: Token <RPAREN> Lexeme ) found
Line# 13: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 15: Token <ID> Lexeme i found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 15: Token <ID> Lexeme i found
Line# 15: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
Line# 15: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 15: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 16: Token <ID> Lexeme i found
Line# 16: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 16: Token <ID> Lexeme i found
Line# 16: Token <ADDOP> Lexeme - found
variable : ID
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
Line# 16: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 16: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <MULOP> Lexeme * found
variable : ID
factor : variable
unary_expression :	factor
term :	unary_expression
Line# 17: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression :	factor
term : term MULOP unary_expression
Line# 17: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 18: Token <PRINTLN> Lexeme println found
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <ID> Lexeme i found
Line# 18: Token <RPAREN> Lexeme ) found
Line# 18: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 20: Token <IF> Lexeme if found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
Line# 20: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 20: Token <LOGICOP> Lexeme && found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
Line# 20: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 20: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
factor : LPAREN expression RPAREN
unary_expression :	factor
term :	unary_expression
Line# 20: Token <LOGICOP> Lexeme || found
simple_expression : term
rel_expression	: simple_expression
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
Line# 20: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 20: Token <LOGICOP> Lexeme && found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression :	factor
term :	unary_expression
simple_expression : term
Line# 20: Token <ADDOP> Lexeme - found
Line# 20: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression :	factor
unary_expression : ADDOP unary_expression
term :	unary_expression
Line# 20: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
factor : LPAREN expression RPAREN
unary_expression :	factor
term :	unary_expression
Line# 20: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
Line# 21: Token <ID> Lexeme i found
Line# 21: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 21: Token <CONST_INT> Lexeme 100 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 21: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
Line# 22: Token <ELSE> Lexeme else found
Line# 23: Token <ID> Lexeme i found
Line# 23: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 23: Token <CONST_INT> Lexeme 200 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 23: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 24: Token <PRINTLN> Lexeme println found
Line# 24: Token <LPAREN> Lexeme ( found
Line# 24: Token <ID> Lexeme i found
Line# 24: Token <RPAREN> Lexeme ) found
Line# 24: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 26: Token <RETURN> Lexeme return found
Line# 26: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression :	factor
term :	unary_expression
Line# 26: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression	: simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 27: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	7--> <i, INT> 
	11--> <x, ARRAY, INT> 
	ScopeTable# 1
	2--> <main, > 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit
start : program
Total Lines: 28 
Total Errors: 0 
